canvas {
    width = 1000.
    height = 600.

    shape box = Rectangle {
        w: width
        h: height

        center: (0., 0.)

        strokeColor: rgba(0., 0., 0., 1.)
        strokeWidth: 3.

        color: rgba(1., 1., 1., 1.)
    }
}

Object o {

    naturalLength = 150.
    o.tensorRank = 1.
    o.tensorImbalance = 0.

    -- o.leftAttached = false
    -- o.rightAttached = false

    shape o.shape = Line {
        -- start: (0., ?)
        -- end: (canvas.width, ?)

        color: rgba(0., 0., 0., 1.)
        thickness: 5.
    }

    o.shape above canvas.box

    -- ensure contains(canvas.box, o.shape)
    
    ensure horizontal(o.shape) -- ensure lines are horizontal
    ensure rightwards(o.shape) -- ensure lines move from left to right

    encourage lengthNear(o.shape, naturalLength)
}

Object o 
where o := tensor(a, b) 
with Object a; Object b {
    override o.tensorRank = a.tensorRank + b.tensorRank
    override o.tensorImbalance = b.tensorRank - a.tensorRank

    override o.shape.color = rgba(0., 0., 0., 0.2)

    override a.shape.start = o.shape.start + (0., 50.*a.tensorRank)
    -- component version gives "Cannot read property 'tag' of undefined"
    -- override a.shape.start[0] = o.shape.start[0]
    -- override a.shape.start[1] = o.shape.start[1] + 50.*a.tensorRank
    override b.shape.start = o.shape.start + (0., -50.*b.tensorRank)
    override a.shape.end = o.shape.end + (0., 50.*a.tensorRank)
    override b.shape.end = o.shape.end + (0., -50.*b.tensorRank)
}

Morphism m {
    -- morphism should all be roughly congruent (higher priority than horizontality of objects)
    shape m.shape = Rectangle {
        w: 100.
        h: 300.

        strokeColor: rgba(0., 0., 0., 1.)
        strokeWidth: 3.
    }

    shape m.text = Text {
        center: m.shape.center
        string: m.label
        fontSize: "30pt"
    }

    m.text above m.shape
    m.shape above canvas.box

    ensure contains(canvas.box, m.shape)
    -- ensure contains(m.shape, m.text) -- keep label inside box
}

Morphism m
where m := join(a, b)
with Object a; Object b {
    -- attach objects to morphism

    override a.shape.end = m.shape.center + (-m.shape.w/2., 50.*a.tensorImbalance)
    override b.shape.start = m.shape.center + (m.shape.w/2., 50.*b.tensorImbalance)

    -- override a.rightAttached = true
    -- override b.leftAttached = true
}